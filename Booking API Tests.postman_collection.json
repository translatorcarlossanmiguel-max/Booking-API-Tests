{
	"info": {
		"_postman_id": "feeaf7cd-c293-4e26-bae5-0371e96f112c",
		"name": "Booking API Tests",
		"description": "_Collection to test Booking API endpoints with assertions_",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40397174",
		"_collection_link": "https://www.postman.com/telecoms-astronomer-21474757/workspace/my-workspace/collection/40397174-feeaf7cd-c293-4e26-bae5-0371e96f112c?action=share&source=collection_link&creator=40397174"
	},
	"item": [
		{
			"name": "Positive Tests",
			"item": [
				{
					"name": "Positive case",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Removed duplicate declaration of jsonData\r",
									"// Check status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Parse response JSON\r",
									"const jsonData = pm.response.json();\r",
									"\r",
									"// Check bookingid exists\r",
									"pm.test(\"Booking ID exists\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
									"});\r",
									"\r",
									"// Check booking object contains required keys\r",
									"pm.test(\"Booking object schema\", function () {\r",
									"    pm.expect(jsonData.booking).to.have.keys([\r",
									"        \"firstname\",\r",
									"        \"lastname\",\r",
									"        \"totalprice\",\r",
									"        \"depositpaid\",\r",
									"        \"bookingdates\",\r",
									"        \"additionalneeds\"\r",
									"    ]);\r",
									"});\r",
									"\r",
									"// Test each field type\r",
									"pm.test(\"Booking object types are correct\", function () {\r",
									"    const booking = jsonData.booking;\r",
									"\r",
									"    pm.expect(booking.firstname).to.be.a('string');\r",
									"    pm.expect(booking.lastname).to.be.a('string');\r",
									"    pm.expect(booking.totalprice).to.be.a('number');\r",
									"    pm.expect(booking.depositpaid).to.be.a('boolean');\r",
									"    pm.expect(booking.additionalneeds).to.be.a('string');\r",
									"\r",
									"    // Booking dates\r",
									"    pm.expect(booking.bookingdates).to.be.an('object');\r",
									"    pm.expect(booking.bookingdates).to.have.keys(['checkin','checkout']);\r",
									"\r",
									"    // Check date format YYYY-MM-DD using regex\r",
									"    const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"    pm.expect(booking.bookingdates.checkin).to.match(dateRegex);\r",
									"    pm.expect(booking.bookingdates.checkout).to.match(dateRegex);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let payload = JSON.parse(pm.variables.get(\"bookingPayload\"));\r",
									"pm.request.body.update(payload);\r",
									"\r",
									"const url = pm.environment.get(\"baseUrl\");\r",
									"console.log(\"Base URL:\", url);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{bookingPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{QA}}/booking",
							"host": [
								"{{QA}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Tests",
			"item": [
				{
					"name": "Wrong Data Type",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ❌ Status code should not be 200\r",
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"// ✅ Status code is 400\r",
									"pm.test(\"Status is 400 or 500\", function () {\r",
									"    pm.expect([400, 500]).to.include(pm.response.code);\r",
									"});\r",
									"\r",
									"\r",
									"// Parse JSON safely\r",
									"let jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    pm.test(\"Response is valid JSON\", function () {\r",
									"        pm.expect.fail(\"Response is not valid JSON\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// ✅ Schema check: should contain 'error'\r",
									"pm.test(\"Response has error key\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Booking API should reject invalid data types\", function () {\r",
									"    // Fail if API returns bookingid instead of error\r",
									"    if (jsonData.bookingid) {\r",
									"        pm.expect.fail(\"API accepted invalid data; bookingid was created\");\r",
									"    }\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.match(/invalid|type/i);\r",
									"});\r",
									"\r",
									"const dateRegex = /^\\d{4}-\\d{2}-\\d{2}$/;\r",
									"\r",
									"pm.test(\"Checkin is valid date format\", function () {\r",
									"    const checkin = booking.bookingdates.checkin;\r",
									"    pm.expect(checkin).to.match(dateRegex, \"Checkin must match YYYY-MM-DD\");\r",
									"\r",
									"    // Additional: ensure it can be parsed as a real date\r",
									"    const parsedDate = new Date(checkin);\r",
									"    pm.expect(parsedDate.toString()).to.not.equal(\"Invalid Date\");\r",
									"});\r",
									"\r",
									"pm.test(\"Checkout is valid date format\", function () {\r",
									"    const checkout = booking.bookingdates.checkout;\r",
									"    pm.expect(checkout).to.match(dateRegex, \"Checkout must match YYYY-MM-DD\");\r",
									"\r",
									"    const parsedDate = new Date(checkout);\r",
									"    pm.expect(parsedDate.toString()).to.not.equal(\"Invalid Date\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get(\"baseUrl\");\r",
									"console.log(\"Base URL:\", url);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{WrongDataType}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{QA}}/booking",
							"host": [
								"{{QA}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// ❌ Status code should not be 200\r",
									"pm.test(\"Status code is not 200\", function () {\r",
									"    pm.response.to.not.have.status(200);\r",
									"});\r",
									"\r",
									"// ✅ Status code is 500\r",
									"pm.test(\"Status code is 500\", function () {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"// Parse JSON safely\r",
									"let jsonData;\r",
									"try {\r",
									"    jsonData = pm.response.json();\r",
									"} catch (e) {\r",
									"    pm.test(\"Response is valid JSON\", function () {\r",
									"        pm.expect.fail(\"Response is not valid JSON\");\r",
									"    });\r",
									"}\r",
									"\r",
									"// ✅ Schema check: should contain 'error'\r",
									"pm.test(\"Response has error key\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"});\r",
									"\r",
									"// ✅ Optional: check error message text\r",
									"pm.test(\"Error message is 'Missing required fields'\", function () {\r",
									"    pm.expect(jsonData.error).to.eql(\"Missing required fields\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get(\"baseUrl\");\r",
									"console.log(\"Base URL:\", url);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{MissingRequiredFields}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{QA}}/booking",
							"host": [
								"{{QA}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"let bookingPayload = {\r",
					"    firstname: \"John\",\r",
					"    lastname: \"Doe\",\r",
					"    totalprice: 150,\r",
					"    depositpaid: true,\r",
					"    bookingdates: {\r",
					"        checkin: \"2025-08-22\",\r",
					"        checkout: \"2025-08-23\"\r",
					"    },\r",
					"    additionalneeds: \"breakfast\"\r",
					"};\r",
					"\r",
					"// save as environment/collection variable for re-use\r",
					"pm.collectionVariables.set(\"bookingPayload\", JSON.stringify(bookingPayload));\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "bookingPayload",
			"value": "{\"firstname\":\"John\",\"lastname\":\"Doe\",\"totalprice\":150,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2025-08-22\",\"checkout\":\"2025-08-23\"},\"additionalneeds\":\"breakfast\"}",
			"type": "string"
		},
		{
			"key": "MissingRequiredFields",
			"value": "{\"lastname\":\"Doe\",\"totalprice\":150,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2025-08-22\",\"checkout\":\"2025-08-23\"},\"additionalneeds\":\"breakfast\"}",
			"type": "string"
		},
		{
			"key": "WrongDataType",
			"value": "{ \"firstname\": \"John\",\"lastname\": \"Doe\",\"totalprice\": \"abc\",\"depositpaid\": \"yes\",\"bookingdates\": {    \"checkin\": \"not-a-date\",\"checkout\": \"2025-08-23\"\n  }, \"additionalneeds\": \"Breakfast\"}",
			"type": "string"
		}
	]
}